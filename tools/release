#!/bin/bash
# Nom du fichier Script TCL
FILENAME_SCRIPT="ZCT.tcl"
# verification des pre requis:
git=$(which git)
if test "${git}" = ""; then
	echo "Error: Could not locate \`git' program."
	exit 1
fi

# variables
DIR_SCRIPT=$( cd -- "$(dirname -- "$0")" &> /dev/null && pwd )
DIR_CURRENT=$(pwd)
FILE_PATH="$(realpath -- "${DIR_SCRIPT}/../${FILENAME_SCRIPT}")"
cd "$(realpath -- "${DIR_SCRIPT}/../")" || exit

# verification que le script TCL existe
if [ ! -f "${FILE_PATH}" ]; then
    echo "${FILE_PATH} est introuvable"
    exit
fi
# Récupere la version (x.x.x) dans le fichier TCL du script
# et l'enregistre dans la variable CurrentVersion
#
    # array set PKG {
    #     "version"	        "0.0.5"
    # }
# il prend un argument fichier :
# GetCurrentVersion Fichier.tcl
GetCurrentVersion () {
    string=$(grep '"version"' "$1")
    partern='\s+"version"\s+"([0-9]+)\.([0-9]+)\.([0-9]+)"'
    [[ $string =~ $partern ]]
    CurrentVersion="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
    echo "Current version: ${CurrentVersion}"
}
# Met a jour la version
# deux arguments fichier et nouvelle version :
# UpdateVersion Fichier.tcl 0.0.6
UpdateVersion() {
	sed -r -i "s/(\s+\"version\"\s+\")(.*)(\".*)$/\1""${2}""\3/" "${1}"
    echo "New version: ${2}"
}
GitConfig() {
    git config --global pull.ff false
    git config --global alias.sdiff '!'"git diff && git submodule foreach 'git diff'"
    git config --global alias.spush 'push --recurse-submodules=on-demand'
    git config --global alias.supdate 'submodule update --remote --merge'
    git config --global alias.spull '!git pull && git submodule sync --recursive && git submodule update --init --recursive'
}
UpdateDocs() {
    # Generate docs
    echo -n "Generating docs (be patient)..."
    ### Check for dir, if not found create it using the mkdir ##
    [ ! -d "docs" ] && mkdir -p "docs"
    cd docs
    [ ! -d "tcldoc" ] && git clone https://github.com/ZarTek-Creole/tcldoc.git tcldoc
    cd  tcldoc
    git pull
    tclsh ./docs/tcldoc/tcldoc.tcl -f docs .
    git commit -am "Generate docs with ${VERS_NEW} version" > /dev/null
    cd ../..
}

UpdateChangeLog() {
   echo "<html>
  <table>
    <tr>
      <th>date</th>
      <th>commit</th>
      <th>message</th>
      <th>auteur</th>
    </tr>" > change-notes.html
    git log `git describe --tags --abbrev=0`..HEAD --no-merges --oneline --pretty=format:"<tr>%n      <td>%cs</td>%n      <td>%h</td>%n      <td><a href="https://github.com/ZarTek-Creole/TCL-ClaraServ/commit/%h">%s</a></td>%n      <td>%an</td>%n    </tr>" >> change-notes.html
    echo "  </table>
</html>" >> change-notes.html
echo "ChangeLog créé"
}

# Verifie que l'appelle du script est correct
# Premier argument:
#   -M      Pour incrementer la valeur Major
#   -m      Pour incrementer la valeur minor
#   -p      Pour incrementer la valeur patch
# Suivis du message du commit
# ./release -m bugfix blabla
if [ -z "$2" ]
then
    >&2 echo "usage: $(basename "$0") [-Mmp (Major.minor.patch)] <commit message> "
    exit 1
fi
while getopts ":Mmp" Option
do
  case $Option in
    M ) major=true;;
    m ) minor=true;;
    p ) patch=true;;
  esac
done

shift $(($OPTIND - 1))
GetCurrentVersion ${FILENAME_SCRIPT}
# On recuperer la version du script tcl et la split en array
a=( ${CurrentVersion//./ } )
if [ ${#a[@]} -ne 3 ]
then
  >&2 echo "ERREUR: Numéro de version dans le script invalide ou introuvable."
  exit 1
fi

# on incremente la version comme demander
if [ -n "$major" ]
then
  ((a[0]++))
  a[1]=0
  a[2]=0
fi
if [ -n "$minor" ]
then
  ((a[1]++))
  a[2]=0
fi
if [ -n "$patch" ]
then
  ((a[2]++))
fi
VERS_NEW=${a[0]}.${a[1]}.${a[2]}
UpdateVersion ${FILENAME_SCRIPT} "${VERS_NEW}"
GitConfig
#Remove existing staged files
git reset HEAD -- .
git spush
git supdate
git spull
git add .
git commit -am "$*"
UpdateDocs
UpdateChangeLog
git push
cd "${DIR_CURRENT}" || exit